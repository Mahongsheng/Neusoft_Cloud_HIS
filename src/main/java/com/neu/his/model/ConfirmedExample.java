package com.neu.his.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ConfirmedExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public ConfirmedExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andConfirmedidIsNull() {
            addCriterion("confirmedID is null");
            return (Criteria) this;
        }

        public Criteria andConfirmedidIsNotNull() {
            addCriterion("confirmedID is not null");
            return (Criteria) this;
        }

        public Criteria andConfirmedidEqualTo(Integer value) {
            addCriterion("confirmedID =", value, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidNotEqualTo(Integer value) {
            addCriterion("confirmedID <>", value, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidGreaterThan(Integer value) {
            addCriterion("confirmedID >", value, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidGreaterThanOrEqualTo(Integer value) {
            addCriterion("confirmedID >=", value, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidLessThan(Integer value) {
            addCriterion("confirmedID <", value, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidLessThanOrEqualTo(Integer value) {
            addCriterion("confirmedID <=", value, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidIn(List<Integer> values) {
            addCriterion("confirmedID in", values, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidNotIn(List<Integer> values) {
            addCriterion("confirmedID not in", values, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidBetween(Integer value1, Integer value2) {
            addCriterion("confirmedID between", value1, value2, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andConfirmedidNotBetween(Integer value1, Integer value2) {
            addCriterion("confirmedID not between", value1, value2, "confirmedid");
            return (Criteria) this;
        }

        public Criteria andRegistidIsNull() {
            addCriterion("registID is null");
            return (Criteria) this;
        }

        public Criteria andRegistidIsNotNull() {
            addCriterion("registID is not null");
            return (Criteria) this;
        }

        public Criteria andRegistidEqualTo(Integer value) {
            addCriterion("registID =", value, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidNotEqualTo(Integer value) {
            addCriterion("registID <>", value, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidGreaterThan(Integer value) {
            addCriterion("registID >", value, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidGreaterThanOrEqualTo(Integer value) {
            addCriterion("registID >=", value, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidLessThan(Integer value) {
            addCriterion("registID <", value, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidLessThanOrEqualTo(Integer value) {
            addCriterion("registID <=", value, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidIn(List<Integer> values) {
            addCriterion("registID in", values, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidNotIn(List<Integer> values) {
            addCriterion("registID not in", values, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidBetween(Integer value1, Integer value2) {
            addCriterion("registID between", value1, value2, "registid");
            return (Criteria) this;
        }

        public Criteria andRegistidNotBetween(Integer value1, Integer value2) {
            addCriterion("registID not between", value1, value2, "registid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidIsNull() {
            addCriterion("deseaseID is null");
            return (Criteria) this;
        }

        public Criteria andDeseaseidIsNotNull() {
            addCriterion("deseaseID is not null");
            return (Criteria) this;
        }

        public Criteria andDeseaseidEqualTo(Integer value) {
            addCriterion("deseaseID =", value, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidNotEqualTo(Integer value) {
            addCriterion("deseaseID <>", value, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidGreaterThan(Integer value) {
            addCriterion("deseaseID >", value, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidGreaterThanOrEqualTo(Integer value) {
            addCriterion("deseaseID >=", value, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidLessThan(Integer value) {
            addCriterion("deseaseID <", value, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidLessThanOrEqualTo(Integer value) {
            addCriterion("deseaseID <=", value, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidIn(List<Integer> values) {
            addCriterion("deseaseID in", values, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidNotIn(List<Integer> values) {
            addCriterion("deseaseID not in", values, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidBetween(Integer value1, Integer value2) {
            addCriterion("deseaseID between", value1, value2, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDeseaseidNotBetween(Integer value1, Integer value2) {
            addCriterion("deseaseID not between", value1, value2, "deseaseid");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeIsNull() {
            addCriterion("diseaseTime is null");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeIsNotNull() {
            addCriterion("diseaseTime is not null");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeEqualTo(Date value) {
            addCriterion("diseaseTime =", value, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeNotEqualTo(Date value) {
            addCriterion("diseaseTime <>", value, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeGreaterThan(Date value) {
            addCriterion("diseaseTime >", value, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeGreaterThanOrEqualTo(Date value) {
            addCriterion("diseaseTime >=", value, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeLessThan(Date value) {
            addCriterion("diseaseTime <", value, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeLessThanOrEqualTo(Date value) {
            addCriterion("diseaseTime <=", value, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeIn(List<Date> values) {
            addCriterion("diseaseTime in", values, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeNotIn(List<Date> values) {
            addCriterion("diseaseTime not in", values, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeBetween(Date value1, Date value2) {
            addCriterion("diseaseTime between", value1, value2, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andDiseasetimeNotBetween(Date value1, Date value2) {
            addCriterion("diseaseTime not between", value1, value2, "diseasetime");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryIsNull() {
            addCriterion("confirmedCategory is null");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryIsNotNull() {
            addCriterion("confirmedCategory is not null");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryEqualTo(Boolean value) {
            addCriterion("confirmedCategory =", value, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryNotEqualTo(Boolean value) {
            addCriterion("confirmedCategory <>", value, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryGreaterThan(Boolean value) {
            addCriterion("confirmedCategory >", value, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryGreaterThanOrEqualTo(Boolean value) {
            addCriterion("confirmedCategory >=", value, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryLessThan(Boolean value) {
            addCriterion("confirmedCategory <", value, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryLessThanOrEqualTo(Boolean value) {
            addCriterion("confirmedCategory <=", value, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryIn(List<Boolean> values) {
            addCriterion("confirmedCategory in", values, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryNotIn(List<Boolean> values) {
            addCriterion("confirmedCategory not in", values, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryBetween(Boolean value1, Boolean value2) {
            addCriterion("confirmedCategory between", value1, value2, "confirmedcategory");
            return (Criteria) this;
        }

        public Criteria andConfirmedcategoryNotBetween(Boolean value1, Boolean value2) {
            addCriterion("confirmedCategory not between", value1, value2, "confirmedcategory");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table confirmed
     *
     * @mbg.generated do_not_delete_during_merge Mon Jul 22 15:20:08 CST 2019
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table confirmed
     *
     * @mbg.generated Mon Jul 22 15:20:08 CST 2019
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}